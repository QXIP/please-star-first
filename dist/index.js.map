{"version":3,"file":"index.js","sources":["../webpack://please-star-first/../../lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://please-star-first/webpack/bootstrap","../webpack://please-star-first/webpack/runtime/compat","../webpack://please-star-first/./src/index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","import core from '@actions/core';\nimport github from '@actions/github';\n\ntry {\n  const token = core.getInput('token');\n\n  const octokit = github.getOctokit(token);\n\n  // console.log(`The event payload: ${JSON.stringify(github.context.payload, undefined, 2)}`);\n\n  switch (github.context.eventName) {\n    case \"issues\": {\n      handleIssues(octokit, github.context.payload).catch(error => {\n        core.setFailed(error.message);\n      })\n    }\n  }\n} catch (error) {\n  core.setFailed(error.message);\n}\n\n/**\n * \n * @param {ReturnType<typeof github.getOctokit>} octokit \n * @param {import(\"@octokit/webhooks\").EventPayloads.WebhookPayloadIssues} payload \n */\nasync function handleIssues(octokit, payload) {\n  if (payload.action !== \"opened\" && payload.action !== \"reopened\") {\n    return;\n  }\n  const { sender } = payload;\n  if (await isStarredBy(octokit, sender.login)) {\n    console.log(`${sender.login} has starred this repository`)\n    return;\n  }\n  console.log(`${sender.login} has not starred this repository`)\n\n  const message = core.getInput('message');\n  // opened by non-stargazer\n  await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {\n    ...github.context.repo,\n    issue_number: payload.issue.number,\n    body: `<!-- please-star-first: {} -->\n\n${message}`\n  })\n\n  /*\n  await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {\n    ...github.context.repo,\n    issue_number: payload.issue.number,\n    state: \"closed\"\n  })\n  */\n}\n\n/**\n * @param {ReturnType<typeof github.getOctokit>} octokit \n * @param {string} user \n */\nasync function isStarredBy(octokit, user) {\n  for (let page = 0; ; page++) {\n    const resp = await octokit.request('GET /repos/{owner}/{repo}/stargazers', {\n      ...github.context.repo,\n      page,\n      per_page: 100\n    });\n    if (resp.data.some(u => u.login === user)) {\n      return true;\n    }\n    if (resp.data.length < 100) {\n      break;\n    }\n  }\n  return false;\n}\n"],"mappings":";;;;;AAAA;;;A;;;;;AAAA;;;A;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;","sourceRoot":""}